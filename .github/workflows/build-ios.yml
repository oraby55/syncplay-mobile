name: Build iOS IPA

on:
  workflow_dispatch: # Allows you to trigger the build manually from the Actions tab
  push:
    branches:
      - main # Or whatever your default branch is

jobs:
  build_ipa:
    name: Build iOS IPA
    runs-on: macos-latest # iOS builds require macOS environment

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Ruby for CocoaPods
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1' # <--- UPDATED THIS LINE (was '2.7')

      - name: Install CocoaPods
        run: gem install cocoapods


      # KMM projects often have the shared module built by Gradle and linked.
      # Xcode might be configured to run this, or we might need to do it explicitly.
      # First, let's ensure Java and Gradle are set up for the KMM shared module.
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17' # Adjust if your KMM project uses a different JDK

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Make gradlew executable
        run: chmod +x ./gradlew
        
      # It's possible the KMM shared framework needs to be built before pod install or xcodebuild.
      # Common tasks: :shared:assembleXCFramework or :shared:packForXcode
      # This step might be optional if Xcode's build phases handle Kotlin compilation.
      # If xcodebuild fails complaining about a missing Kotlin framework, uncomment and adjust this.
      # - name: Build KMM Shared Framework (if needed)
      #   run: |
      #     echo "Attempting to build shared KMM framework..."
      #     ./gradlew :shared:assembleXCFramework --info || \
      #     ./gradlew :shared:packForXcode --info || \
      #     echo "KMM shared framework build attempt finished. Continuing with pod install. If Xcode fails, this step might need adjustment."

      - name: Install Pod Dependencies
        run: |
          cd iosApp
          pod install --repo-update
        working-directory: ./iosApp # Ensures pod install runs in the correct directory

      - name: Select Xcode version (optional, defaults to a recent version)
        run: sudo xcode-select -s /Applications/Xcode_$(xcodebuild -version | grep Xcode | cut -d' ' -f2 | cut -d'.' -f1).app

      - name: Build and Archive iOS App
        env:
          # Attempting to use generic signing for ad-hoc distribution suitable for jailbreak
          # The ExportOptions.plist will have the final say on signing method.
          # If your ExportOptions.plist is set for "ad-hoc" or "development", it should be fine.
          CODE_SIGN_IDENTITY: "Apple Development" # A generic identity often available on CI
          DEVELOPMENT_TEAM: "" # No specific team
        run: |
          # Determine the scheme. It's often the same as the project name without .xcodeproj.
          # For iosApp.xcodeproj and iosApp.xcworkspace, the scheme is likely 'iosApp'.
          # You can list schemes with: xcodebuild -list -workspace iosApp/iosApp.xcworkspace
          SCHEME_NAME="iosApp" # <<<<<<<<< IMPORTANT: Verify this scheme name!

          echo "Archiving with scheme: $SCHEME_NAME"
          xcodebuild archive \
            -workspace iosApp/iosApp.xcworkspace \
            -scheme "$SCHEME_NAME" \
            -sdk iphoneos \
            -archivePath "$GITHUB_WORKSPACE/build/iosApp.xcarchive" \
            CODE_SIGNING_ALLOWED=NO # Try to disable codesigning requirement at archive stage
            # The following might also be useful if strict signing is an issue:
            # CODE_SIGN_IDENTITY="" \
            # CODE_SIGNING_REQUIRED=NO \

      - name: Export IPA from Archive
        run: |
          echo "Exporting IPA..."
          xcodebuild -exportArchive \
            -archivePath "$GITHUB_WORKSPACE/build/iosApp.xcarchive" \
            -exportPath "$GITHUB_WORKSPACE/build/ipa" \
            -exportOptionsPlist iosApp/ExportOptions.plist # Using the plist from your repo

          # Find the generated IPA file (its name might vary based on ExportOptions.plist)
          IPA_PATH=$(find "$GITHUB_WORKSPACE/build/ipa" -name "*.ipa" -print -quit)
          if [ -z "$IPA_PATH" ]; then
            echo "Error: IPA file not found in $GITHUB_WORKSPACE/build/ipa/"
            ls -R "$GITHUB_WORKSPACE/build/ipa/" # List contents for debugging
            exit 1
          fi
          echo "IPA generated at: $IPA_PATH"
          echo "IPA_PATH=$IPA_PATH" >> $GITHUB_ENV

      - name: Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: syncplay-mobile-ipa
          path: ${{ env.IPA_PATH }}
          if-no-files-found: error
